# if they are a writer/director, place them on their production
members[3, "writer/director film"]
match(members[3, "writer/director film"], production_titles)
# if they are a writer/director, place them on their production
match(members[6, "writer/director film"], production_titles)
# if they are a writer/director, place them on their production
match(members[3, "writer/director film"], production_titles)
# find which production they should get placed on
which_prod <- match(members[3, "writer/director film"], production_titles)
production_titles(which_rpdo)
production_titles(which_prod)
production_titles[which_prod]
# replace spaces with underscores
production_A_title_u <- gsub(" ", "_", production_A_title)
production_B_title_u <- gsub(" ", "_", production_B_title)
# ***** GLOBAL VARIABLES - entered by user in app *****
# number of productions <- "x"
production_A_title <- "Ace Ventura"
production_B_title <- "Blazing Saddles"
production_C_title <- "Contact"
production_titles <- c(production_A_title, production_B_title, production_C_title)
# replace spaces with underscores
production_A_title_u <- gsub(" ", "_", production_A_title)
production_B_title_u <- gsub(" ", "_", production_B_title)
production_C_title_u <- gsub(" ", "_", production_C_title)
production_titles_u <- c(production_A_title_u, production_B_title_u, production_C_title_u)
# find which production they should get placed on
which_prod <- match(members[3, "writer/director film"], production_titles)
# find which production they should get placed on
which_prod <- match(members[3, "writer/director film"], production_titles) # 3 for testing, change back to 1
production_titles[which_prod]
production_titles_u[which_prod]
# create column titles corresponding to each production
prod_1_column_names <- sapply(column_names, function(x) paste0(production_titles_u[1], x))
# create column titles corresponding to each production
prod_1_column_names <- sapply(column_names, function(x) paste0(production_titles_u[1], "_", x))
# load libraries
library(dplyr)
library(devtools)
# ***** GLOBAL VARIABLES - entered by user in app *****
# number of productions <- "x"
production_A_title <- "Ace Ventura"
production_B_title <- "Blazing Saddles"
production_C_title <- "Contact"
production_titles <- c(production_A_title, production_B_title, production_C_title)
# replace spaces with underscores
production_A_title_u <- gsub(" ", "_", production_A_title)
production_B_title_u <- gsub(" ", "_", production_B_title)
production_C_title_u <- gsub(" ", "_", production_C_title)
production_titles_u <- c(production_A_title_u, production_B_title_u, production_C_title_u)
# ** ACTUAL GOOGLE FORMS DATA: CREATING MEMBERS DF -- VERY INCOMPLETE **
members = read.csv("TEST_ LUX Role Survey AU19 (Responses) - Form Responses 1.csv", stringsAsFactors=FALSE)
# delete timestamped row
members <- members[,-1]
# define column names
column_names <- c("email", "name", "years_in_lux", "years_at_uw", "writer/director?",
"writer/director film", "pref_prod_1", "pref_prod_2", "pref_prod_3",
"pref_role_1", "pref_role_2", "pref_role_3", "importance", "notes")
# rename column names so the program can reference them
colnames(members) <- column_names
# ** CREATING PRODUCTION DF **
# list of roles, ordered by experience required
roles <- c("director", "producer", "special effects", "editor", "dp", "ad", "soundtrack", "camera",
"assistant camera", "sound", "makeup", "art dept", "costumes", "scripty", "pa")
# create 1 empty production dataframe
production <- data.frame(roles)
# add roles row names
row.names(production) <- roles
# delete inital row of role names
production$roles <- NULL
# create column titles corresponding to each production
prod_1_column_names <- sapply(column_names, function(x) paste0(production_titles_u[1], "_", x))
prod_2_column_names <- sapply(column_names, function(x) paste0(production_titles_u[2], "_", x))
prod_3_column_names <- sapply(column_names, function(x) paste0(production_titles_u[3], "_", x))
# combine all column titles into one giant list of column titles
all_column_names <- c(prod_1_column_names, prod_2_column_names, prod_3_column_names)
# create 1 big "production" dataframe, name the columns and make every cell "NA"
production[,all_column_names] <- NA
# ** CREATING PA DF **
# create a "pa" dataframe with 1 cell
pa <- data.frame("pa")
# delete inital row
pa$X.pa. <- NULL
# create 1 "pa" dataframe, name the columns and make every cell "NA"
pa[,column_names] <- NA
# sort members df by experience, so more experienced people get placed first
members <- members[order(-members$years_in_lux, -members$years_at_uw),]
# define 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
# find which production they should get placed on
which_prod <- match(members[3, "writer/director film"], production_titles) # 3 for testing, change back to 1 for final version
production_titles_u[which_prod]
starting_column_number <- paste0(members[1, production_titles_u[which_prod]], "_name")
production_titles_u(which_prod)
production_titles_u[which_prod)]
production_titles_u[which_prod]
starting_column_number <- paste0(production_titles_u[which_prod], "_email")
production["director", starting_column_name] <- members[1, i]
if (members[3, "writer/director?"] == "Yes") {
# find which production they should get placed on
which_prod <- match(members[3, "writer/director film"], production_titles) # 3 for testing, change back to 1 for final version
starting_column_name <- paste0(production_titles_u[which_prod], "_email")
# place member on production df
for (i in 1:14) {
production["director", starting_column_name] <- members[3, i]
# "production" df is now updated with the new placement!
# delete the top row off of the "members" df
members <- members[-3,]
member_just_placed <- TRUE
break
}
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, production_choice + 6], "_email")
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, production_choice + 6], "_email")
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, 6], "_email")
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, 6], "_email")
column_to_check <- gsub(" ", "_", column_to_check)
# store the column # matching the column_to_check string for future use
starting_column_number <- which(colnames(production) == column_to_check)
if (members[3, "writer/director?"] == "Yes") {
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, 6], "_email")
column_to_check <- gsub(" ", "_", column_to_check)
# store the column # matching the column_to_check string for future use
starting_column_number <- which(colnames(production) == column_to_check)
# place member on production df
for (i in 1:14) {
production["director", starting_column_number - 1 + i] <- members[3, i]
# "production" df is now updated with the new placement!
# delete the top row off of the "members" df
members <- members[-3,]
member_just_placed <- TRUE
break
}
# store the column # matching the column_to_check string for future use
starting_column_number <- which(colnames(production) == column_to_check)
production["director", starting_column_number - 1 + 1] <- members[3, 1]
production["director", starting_column_number - 1 + 1] <- members[3, 1]
if (members[3, "writer/director?"] == "Yes") {
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, 6], "_email")
column_to_check <- gsub(" ", "_", column_to_check)
# store the column # matching the column_to_check string for future use
starting_column_number <- which(colnames(production) == column_to_check)
# place member on production df
for (i in 1:14) {
production["director", starting_column_number - 1 + i] <- members[3, i]
# "production" df is now updated with the new placement!
# delete the top row off of the "members" df
members <- members[-3,]
member_just_placed <- TRUE
break
}
source('~/Desktop/lux-people-placer/REAL DATA lux people-placer program copy.R', echo=TRUE)
# load libraries
library(dplyr)
library(devtools)
# ***** GLOBAL VARIABLES - entered by user in app *****
# number of productions <- "x"
production_A_title <- "Ace Ventura"
production_B_title <- "Blazing Saddles"
production_C_title <- "Contact"
production_titles <- c(production_A_title, production_B_title, production_C_title)
# replace spaces with underscores
production_A_title_u <- gsub(" ", "_", production_A_title)
production_B_title_u <- gsub(" ", "_", production_B_title)
production_C_title_u <- gsub(" ", "_", production_C_title)
production_titles_u <- c(production_A_title_u, production_B_title_u, production_C_title_u)
# ** ACTUAL GOOGLE FORMS DATA: CREATING MEMBERS DF -- VERY INCOMPLETE **
members = read.csv("TEST_ LUX Role Survey AU19 (Responses) - Form Responses 1.csv", stringsAsFactors=FALSE)
# delete timestamped row
members <- members[,-1]
# define column names
column_names <- c("email", "name", "years_in_lux", "years_at_uw", "writer/director?",
"writer/director film", "pref_prod_1", "pref_prod_2", "pref_prod_3",
"pref_role_1", "pref_role_2", "pref_role_3", "importance", "notes")
# rename column names so the program can reference them
colnames(members) <- column_names
# ** CREATING PRODUCTION DF **
# list of roles, ordered by experience required
roles <- c("director", "producer", "special effects", "editor", "dp", "ad", "soundtrack", "camera",
"assistant camera", "sound", "makeup", "art dept", "costumes", "scripty", "pa")
# create 1 empty production dataframe
production <- data.frame(roles)
# add roles row names
row.names(production) <- roles
# delete inital row of role names
production$roles <- NULL
# create column titles corresponding to each production
prod_1_column_names <- sapply(column_names, function(x) paste0(production_titles_u[1], "_", x))
prod_2_column_names <- sapply(column_names, function(x) paste0(production_titles_u[2], "_", x))
prod_3_column_names <- sapply(column_names, function(x) paste0(production_titles_u[3], "_", x))
# combine all column titles into one giant list of column titles
all_column_names <- c(prod_1_column_names, prod_2_column_names, prod_3_column_names)
# create 1 big "production" dataframe, name the columns and make every cell "NA"
production[,all_column_names] <- NA
# ** CREATING PA DF **
# create a "pa" dataframe with 1 cell
pa <- data.frame("pa")
# delete inital row
pa$X.pa. <- NULL
# create 1 "pa" dataframe, name the columns and make every cell "NA"
pa[,column_names] <- NA
# ** SORTING PEOPLE **
# sort members df by experience, so more experienced people get placed first
members <- members[order(-members$years_in_lux, -members$years_at_uw),]
# ** ALGORITHM **
# define 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
# run this loop while there are still members to sort
while (!is.na(members[1,1])) {
# reset to 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
# ********* WRITERS/DIRECTORS *********
if (members[3, "writer/director?"] == "Yes") {
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, 6], "_email")
column_to_check <- gsub(" ", "_", column_to_check)
# store the column # matching the column_to_check string for future use
starting_column_number <- which(colnames(production) == column_to_check)
# place member on production df
for (i in 1:14) {
production["director", starting_column_number - 1 + i] <- members[3, i]
# "production" df is now updated with the new placement!
# delete the top row off of the "members" df
members <- members[-3,]
member_just_placed <- TRUE
break
}
}
# load libraries
library(dplyr)
library(devtools)
# ***** GLOBAL VARIABLES - entered by user in app *****
# number of productions <- "x"
production_A_title <- "Ace Ventura"
production_B_title <- "Blazing Saddles"
production_C_title <- "Contact"
production_titles <- c(production_A_title, production_B_title, production_C_title)
# replace spaces with underscores
production_A_title_u <- gsub(" ", "_", production_A_title)
production_B_title_u <- gsub(" ", "_", production_B_title)
production_C_title_u <- gsub(" ", "_", production_C_title)
production_titles_u <- c(production_A_title_u, production_B_title_u, production_C_title_u)
# ** ACTUAL GOOGLE FORMS DATA: CREATING MEMBERS DF -- VERY INCOMPLETE **
members = read.csv("TEST_ LUX Role Survey AU19 (Responses) - Form Responses 1.csv", stringsAsFactors=FALSE)
# delete timestamped row
members <- members[,-1]
# define column names
column_names <- c("email", "name", "years_in_lux", "years_at_uw", "writer/director?",
"writer/director film", "pref_prod_1", "pref_prod_2", "pref_prod_3",
"pref_role_1", "pref_role_2", "pref_role_3", "importance", "notes")
# rename column names so the program can reference them
colnames(members) <- column_names
# ** CREATING PRODUCTION DF **
# list of roles, ordered by experience required
roles <- c("director", "producer", "special effects", "editor", "dp", "ad", "soundtrack", "camera",
"assistant camera", "sound", "makeup", "art dept", "costumes", "scripty", "pa")
# create 1 empty production dataframe
production <- data.frame(roles)
# add roles row names
row.names(production) <- roles
# delete inital row of role names
production$roles <- NULL
# create column titles corresponding to each production
prod_1_column_names <- sapply(column_names, function(x) paste0(production_titles_u[1], "_", x))
prod_2_column_names <- sapply(column_names, function(x) paste0(production_titles_u[2], "_", x))
prod_3_column_names <- sapply(column_names, function(x) paste0(production_titles_u[3], "_", x))
# combine all column titles into one giant list of column titles
all_column_names <- c(prod_1_column_names, prod_2_column_names, prod_3_column_names)
# create 1 big "production" dataframe, name the columns and make every cell "NA"
production[,all_column_names] <- NA
# ** CREATING PA DF **
# create a "pa" dataframe with 1 cell
pa <- data.frame("pa")
# delete inital row
pa$X.pa. <- NULL
# create 1 "pa" dataframe, name the columns and make every cell "NA"
pa[,column_names] <- NA
# ** SORTING PEOPLE **
# sort members df by experience, so more experienced people get placed first
members <- members[order(-members$years_in_lux, -members$years_at_uw),]
# ** ALGORITHM **
# define 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
# run this loop while there are still members to sort
while (!is.na(members[1,1])) {
# reset to 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
# load libraries
library(dplyr)
library(devtools)
# ***** GLOBAL VARIABLES - entered by user in app *****
# number of productions <- "x"
production_A_title <- "Ace Ventura"
production_B_title <- "Blazing Saddles"
production_C_title <- "Contact"
production_titles <- c(production_A_title, production_B_title, production_C_title)
# replace spaces with underscores
production_A_title_u <- gsub(" ", "_", production_A_title)
production_B_title_u <- gsub(" ", "_", production_B_title)
production_C_title_u <- gsub(" ", "_", production_C_title)
production_titles_u <- c(production_A_title_u, production_B_title_u, production_C_title_u)
# ** ACTUAL GOOGLE FORMS DATA: CREATING MEMBERS DF -- VERY INCOMPLETE **
members = read.csv("TEST_ LUX Role Survey AU19 (Responses) - Form Responses 1.csv", stringsAsFactors=FALSE)
# delete timestamped row
members <- members[,-1]
# define column names
column_names <- c("email", "name", "years_in_lux", "years_at_uw", "writer/director?",
"writer/director film", "pref_prod_1", "pref_prod_2", "pref_prod_3",
"pref_role_1", "pref_role_2", "pref_role_3", "importance", "notes")
# rename column names so the program can reference them
colnames(members) <- column_names
# ** CREATING PRODUCTION DF **
# list of roles, ordered by experience required
roles <- c("director", "producer", "special effects", "editor", "dp", "ad", "soundtrack", "camera",
"assistant camera", "sound", "makeup", "art dept", "costumes", "scripty", "pa")
# create 1 empty production dataframe
production <- data.frame(roles)
# add roles row names
row.names(production) <- roles
# delete inital row of role names
production$roles <- NULL
# create column titles corresponding to each production
prod_1_column_names <- sapply(column_names, function(x) paste0(production_titles_u[1], "_", x))
prod_2_column_names <- sapply(column_names, function(x) paste0(production_titles_u[2], "_", x))
prod_3_column_names <- sapply(column_names, function(x) paste0(production_titles_u[3], "_", x))
# combine all column titles into one giant list of column titles
all_column_names <- c(prod_1_column_names, prod_2_column_names, prod_3_column_names)
# create 1 big "production" dataframe, name the columns and make every cell "NA"
production[,all_column_names] <- NA
# ** CREATING PA DF **
# create a "pa" dataframe with 1 cell
pa <- data.frame("pa")
# delete inital row
pa$X.pa. <- NULL
# create 1 "pa" dataframe, name the columns and make every cell "NA"
pa[,column_names] <- NA
# ** SORTING PEOPLE **
# sort members df by experience, so more experienced people get placed first
members <- members[order(-members$years_in_lux, -members$years_at_uw),]
# ** ALGORITHM **
# define 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
# reset to 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
if (members[3, "writer/director?"] == "Yes") {
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, 6], "_email")
column_to_check <- gsub(" ", "_", column_to_check)
# store the column # matching the column_to_check string for future use
starting_column_number <- which(colnames(production) == column_to_check)
# place member on production df
for (i in 1:14) {
production["director", starting_column_number - 1 + i] <- members[3, i]
# "production" df is now updated with the new placement!
# delete the top row off of the "members" df
members <- members[-3,]
member_just_placed <- TRUE
break
}
}
# store the column # matching the column_to_check string for future use
starting_column_number <- which(colnames(production) == column_to_check)
starting_column_number
# load libraries
library(dplyr)
library(devtools)
# ***** GLOBAL VARIABLES - entered by user in app *****
# number of productions <- "x"
production_A_title <- "Ace Ventura"
production_B_title <- "Blazing Saddles"
production_C_title <- "Contact"
production_titles <- c(production_A_title, production_B_title, production_C_title)
# replace spaces with underscores
production_A_title_u <- gsub(" ", "_", production_A_title)
production_B_title_u <- gsub(" ", "_", production_B_title)
production_C_title_u <- gsub(" ", "_", production_C_title)
production_titles_u <- c(production_A_title_u, production_B_title_u, production_C_title_u)
# ** ACTUAL GOOGLE FORMS DATA: CREATING MEMBERS DF -- VERY INCOMPLETE **
members = read.csv("TEST_ LUX Role Survey AU19 (Responses) - Form Responses 1.csv", stringsAsFactors=FALSE)
# delete timestamped row
members <- members[,-1]
# define column names
column_names <- c("email", "name", "years_in_lux", "years_at_uw", "writer/director?",
"writer/director film", "pref_prod_1", "pref_prod_2", "pref_prod_3",
"pref_role_1", "pref_role_2", "pref_role_3", "importance", "notes")
# rename column names so the program can reference them
colnames(members) <- column_names
# ** CREATING PRODUCTION DF **
# list of roles, ordered by experience required
roles <- c("director", "producer", "special effects", "editor", "dp", "ad", "soundtrack", "camera",
"assistant camera", "sound", "makeup", "art dept", "costumes", "scripty", "pa")
# create 1 empty production dataframe
production <- data.frame(roles)
# add roles row names
row.names(production) <- roles
# delete inital row of role names
production$roles <- NULL
# create column titles corresponding to each production
prod_1_column_names <- sapply(column_names, function(x) paste0(production_titles_u[1], "_", x))
prod_2_column_names <- sapply(column_names, function(x) paste0(production_titles_u[2], "_", x))
prod_3_column_names <- sapply(column_names, function(x) paste0(production_titles_u[3], "_", x))
# combine all column titles into one giant list of column titles
all_column_names <- c(prod_1_column_names, prod_2_column_names, prod_3_column_names)
# create 1 big "production" dataframe, name the columns and make every cell "NA"
production[,all_column_names] <- NA
# ** CREATING PA DF **
# create a "pa" dataframe with 1 cell
pa <- data.frame("pa")
# delete inital row
pa$X.pa. <- NULL
# create 1 "pa" dataframe, name the columns and make every cell "NA"
pa[,column_names] <- NA
# ** SORTING PEOPLE **
# sort members df by experience, so more experienced people get placed first
members <- members[order(-members$years_in_lux, -members$years_at_uw),]
# ** ALGORITHM **
# define 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
# reset to 1st production choice, 1st role choice, and if a member was just placed
production_choice <- 1
role_choice <- 1
member_just_placed <- FALSE
# ********* WRITERS/DIRECTORS *********
if (members[3, "writer/director?"] == "Yes") { # *** change 3s to 1s once troubleshooted
# paste together the correct column name to check in the "production" DF
column_to_check <- paste0(members[3, 6], "_email")
column_to_check <- gsub(" ", "_", column_to_check)
# store the column # matching the column_to_check string for future use
starting_column_number <- which(colnames(production) == column_to_check)
# place member on production df
for (i in 1:14) {
production["director", starting_column_number - 1 + i] <- members[3, i]
# "production" df is now updated with the new placement!
# delete the top row off of the "members" df
}
members <- members[-3,]
member_just_placed <- TRUE
break
}
# load libraries
library(dplyr)
library(devtools)
# ***** GLOBAL VARIABLES - entered by user in app *****
# number of productions <- "x"
production_A_title <- "Ace Ventura"
production_B_title <- "Blazing Saddles"
production_C_title <- "Contact"
production_titles <- c(production_A_title, production_B_title, production_C_title)
# replace spaces with underscores
production_A_title_u <- gsub(" ", "_", production_A_title)
production_B_title_u <- gsub(" ", "_", production_B_title)
production_C_title_u <- gsub(" ", "_", production_C_title)
production_titles_u <- c(production_A_title_u, production_B_title_u, production_C_title_u)
# ** ACTUAL GOOGLE FORMS DATA: CREATING MEMBERS DF -- VERY INCOMPLETE **
members = read.csv("TEST_ LUX Role Survey AU19 (Responses) - Form Responses 1.csv", stringsAsFactors=FALSE)
# delete timestamped row
members <- members[,-1]
# define column names
column_names <- c("email", "name", "years_in_lux", "years_at_uw", "writer/director?",
"writer/director film", "pref_prod_1", "pref_prod_2", "pref_prod_3",
"pref_role_1", "pref_role_2", "pref_role_3", "importance", "notes")
# rename column names so the program can reference them
colnames(members) <- column_names
# ** CREATING PRODUCTION DF **
# list of roles, ordered by experience required
roles <- c("director", "producer", "special effects", "editor", "dp", "ad", "soundtrack", "camera",
"assistant camera", "sound", "makeup", "art dept", "costumes", "scripty", "pa")
# create 1 empty production dataframe
production <- data.frame(roles)
# add roles row names
row.names(production) <- roles
# delete inital row of role names
production$roles <- NULL
# create column titles corresponding to each production
prod_1_column_names <- sapply(column_names, function(x) paste0(production_titles_u[1], "_", x))
prod_2_column_names <- sapply(column_names, function(x) paste0(production_titles_u[2], "_", x))
prod_3_column_names <- sapply(column_names, function(x) paste0(production_titles_u[3], "_", x))
# combine all column titles into one giant list of column titles
all_column_names <- c(prod_1_column_names, prod_2_column_names, prod_3_column_names)
# create 1 big "production" dataframe, name the columns and make every cell "NA"
production[,all_column_names] <- NA
# ** CREATING PA DF **
# create a "pa" dataframe with 1 cell
pa <- data.frame("pa")
# delete inital row
pa$X.pa. <- NULL
# create 1 "pa" dataframe, name the columns and make every cell "NA"
pa[,column_names] <- NA
# ** SORTING PEOPLE **
# sort members df by experience, so more experienced people get placed first
members <- members[order(-members$years_in_lux, -members$years_at_uw),]
