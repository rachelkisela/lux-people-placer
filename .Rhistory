pa <- pa[order(pa$pref_prod_1),]
# store indeces of unique values in pref_prod_1 column to find out where to split pa df
unique_indexes <- tapply(seq_along(pa$pref_prod_1), pa$pref_prod_1, identity)[unique(pa$pref_prod_1)]
unique_indexes <- lapply(unique_indexes, `[[`, 1) # only save first element from each list value
unique_indexes <- unlist(unique_indexes, use.names = FALSE) # turn list into a vector
for (i in 1:length(unique_indexes)) {
if (i == length(unique_indexes)) {
split <- pa[unique_indexes[i]:nrow(pa),]
} else {
split <- pa[unique_indexes[i]:(unique_indexes[i + 1] - 1),]
}
names(split) <- names(prod_df_list[[i]]) # change pa_df colnames to prod_df colnames to match for rbind fxn
# moving row(s) matching production to that production's dataframe
prod_df_list[[i]] <- rbind(prod_df_list[[i]], "Production Assistant" = split)
}
# ********* EXPORTING RESULTS *********
# return(prod_df_list[[1]])      FOR 1 FILE
return(prod_df_list)           # FOR ZIP FILE
}
# Local Test
testlist <- people_placer("Ace Ventura", "Blazing Saddles", "Contact", "TEST_ LUX Role Survey AU19 (Responses) - Form Responses 1.csv")
View(testlist)
runApp()
runApp()
runApp()
setwd("~/Desktop/lux-people-placer")
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
output$downloadData <- downloadHandler(
filename = "productions.zip",
content = function(file) {
allFileNames <- NULL
# loop through each dataframe
for(i in 1:length(prodmaker())) {
# write each dataframe as csv and save fileName
fileName <- paste0(names(prodmaker()[i]), ".csv")
write.csv(prodmaker()[i], fileName)
allFileNames <- c(fileName, allFileNames)
}
zip(file, allFileNames)
#write.csv(prodmaker()[[1]], file, row.names = TRUE)
}
?zip
# contentType = "application/zip"
)
output$downloadData <- downloadHandler(
filename = "productions.zip",
content = function(file) {
allFileNames <- NULL
# loop through each dataframe
for(i in 1:length(prodmaker())) {
# write each dataframe as csv and save fileName
fileName <- paste0(names(prodmaker()[i]), ".csv")
write.csv(prodmaker()[i], fileName)
allFileNames <- c(fileName, allFileNames)
}
zip(file, allFileNames)
#write.csv(prodmaker()[[1]], file, row.names = TRUE)
}
?zip
# contentType = "application/zip"
)
output$downloadData <- downloadHandler(
filename = "productions.zip",
content = function(file) {
allFileNames <- NULL
# loop through each dataframe
for(i in 1:length(prodmaker())) {
# write each dataframe as csv and save fileName
fileName <- paste0(names(prodmaker()[i]), ".csv")
write.csv(prodmaker()[i], fileName)
allFileNames <- c(fileName, allFileNames)
}
zip(file, allFileNames)
#write.csv(prodmaker()[[1]], file, row.names = TRUE)
}
?zip()
# contentType = "application/zip"
)
?zip()
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp()
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp()
runApp('shiny_app_folder')
View(test)
runApp('shiny_app_folder')
filenames <- paste0(production_titles_u, ".csv")
runApp('shiny_app_folder')
View(test)
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
runApp('shiny_app_folder')
shiny::runApp()
install.packages("stringr")
install.packages("stringr")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='rachelkisela',
token='B977C57EF42821DB93D8003FDD6EB88A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rachelkisela',
token='B977C57EF42821DB93D8003FDD6EB88A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rachelkisela',
token='B977C57EF42821DB93D8003FDD6EB88A',
secret='/iYNrMj3wOJs2LvHP3m9J0axtHZxelIXXTlnSqGH')
View(googleform)
quit()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("shinyjs")
library(shinyjs) # used for enabling/disabling Shiny inputs during testing
shiny::runApp()
ui <- fluidPage(
# Logo ----
img(src = "luxlogo.png", height = "10%", width = "10%"),
?img()
# App title ----
column(5, offset = 4, titlePanel("The LUX Production Builder")),
mainPanel(
HTML("This app will intake Google Forms data to create downloadable production spreadsheets.<br><br>
HOW TO USE THIS APP:<br>
<b>1.</b> Go to the Google Form page for this quarter's productions<br>
<b>2.</b> Click \"Responses\"<br>
<b>3.</b> Click the square green Sheets icon (hover = \"View reponses in Sheets\")
in the upper right side of the screen<br>
<b>4.</b> Once the Google Sheet loads, make sure there are no gaps in the rows.
If there are, drag up rows so there are no blank rows<br>
<b>5.</b> Click File -> Download as -> Comma-separated values (.csv, current sheet)<br>
<b>6.</b> Upload that file below:<br><br>"),
fileInput("googleform", "Upload CSV File",
multiple = FALSE,
accept = (".csv")
),
# NOTE 8/1: We will use num_productions as a global variable to allow flexibility in
# future iterations.
HTML("How many productions this quarter?"),
HTML("<i>(NOTE: As of now, this web app only works for 3 productions!
This input box is for testing only.)</i>"),
numericInput("num_productions", label = NULL, value = 3, min = 1),
HTML("<br>"),
HTML("Enter the production titles below (any order):"),
# Place to hold dynamic inputs
uiOutput("inputGroup"),
HTML("<br>"),
downloadButton("downloadData", "Download Production Spreadsheets"),
HTML("<br><br><br><br>")
)
)
?img()
runApp()
lintr::lint()
lintr::lint(app.R)
lintr::lint("app.R")
runApp()
runApp()
runApp()
runApp()
install.packages("shinyWidgets")
library(shinyWidgets) # for background color
ui <- fluidPage(
setBackgroundColor("F7FBFF"),
# Logo ----
img(src = "luxlogo.png", height = "10%", width = "10%",
style = "display: block; margin-left: auto; margin-right: auto;"), # This line centers the logo
# App title ----
column(5, offset = 4, titlePanel("The LUX Production Builder")),
mainPanel(
HTML("<font size=+1>This app will intake Google Forms data to create downloadable production spreadsheets.<br><br>
HOW TO USE THIS APP:</font><br>
<b>1.</b> Go to the Google Form page for this quarter's productions<br>
<b>2.</b> Click \"Responses\"<br>
<b>3.</b> Click the square green Sheets icon (hover = \"View reponses in Sheets\")
in the upper right side of the screen<br>
<b>4.</b> Once the Google Sheet loads, make sure there are no gaps in the rows.
If there are, drag up rows so there are no blank rows<br>
<b>5.</b> Click File -> Download as -> Comma-separated values (.csv, current sheet)<br>
<b>6.</b> Upload that file below:<br><br>"),
fileInput("googleform", "Upload CSV File",
multiple = FALSE,
accept = (".csv")
),
# NOTE 8/1: We will use num_productions as a global variable to allow flexibility in
# future iterations.
HTML("How many productions this quarter?<br>
<i>(NOTE: As of now, this web app only works for 3 productions!
This input box is for testing only.)</i>"),
numericInput("num_productions", label = NULL, value = 3, min = 1),
HTML("<br>"),
HTML("Enter the production titles below (any order):"),
# Place to hold dynamic inputs
uiOutput("inputGroup"),
HTML("<br>"),
downloadButton("downloadData", "Download Production Spreadsheets"),
HTML("<br><br><br><br>")
)
)
runApp()
library(shiny)
library(stringr)
library(shinyWidgets) # for background color
source("lux_production_builder_program.R")
# NOTE 6/3 use showReactLog() in console to show reactive values
ui <- fluidPage(
setBackgroundColor("700F00"),
# Logo ----
img(src = "luxlogo.png", height = "10%", width = "10%",
style = "display: block; margin-left: auto; margin-right: auto;"), # This line centers the logo
# App title ----
column(5, offset = 4, titlePanel("The LUX Production Builder")),
mainPanel(
HTML("<font size=+1>This app will intake Google Forms data to create downloadable production spreadsheets.<br><br>
HOW TO USE THIS APP:</font><br>
<b>1.</b> Go to the Google Form page for this quarter's productions<br>
<b>2.</b> Click \"Responses\"<br>
<b>3.</b> Click the square green Sheets icon (hover = \"View reponses in Sheets\")
in the upper right side of the screen<br>
<b>4.</b> Once the Google Sheet loads, make sure there are no gaps in the rows.
If there are, drag up rows so there are no blank rows<br>
<b>5.</b> Click File -> Download as -> Comma-separated values (.csv, current sheet)<br>
<b>6.</b> Upload that file below:<br><br>"),
fileInput("googleform", "Upload CSV File",
multiple = FALSE,
accept = (".csv")
),
# NOTE 8/1: We will use num_productions as a global variable to allow flexibility in
# future iterations.
HTML("How many productions this quarter?<br>
<i>(NOTE: As of now, this web app only works for 3 productions!
This input box is for testing only.)</i>"),
numericInput("num_productions", label = NULL, value = 3, min = 1),
HTML("<br>"),
HTML("Enter the production titles below (any order):"),
# Place to hold dynamic inputs
uiOutput("inputGroup"),
HTML("<br>"),
downloadButton("downloadData", "Download Production Spreadsheets"),
HTML("<br><br><br><br>")
)
)
server <- function(input, output) {
# ** DYNAMIC # OF INPUTS
observeEvent(input$num_productions, {
output$inputGroup <- renderUI({
input_list <- lapply(1:input$num_productions, function(i) {
# for each dynamically generated input, give a different name
inputName <- paste("prod", i, "title", sep = "")
textInput(inputName, label = h5("Production title:"))
})
do.call(tagList, input_list)
})
})
# ** DYNAMIC # OF INPUTS
prodmaker <- reactive({
if (is.null(input$googleform)) {
return(NULL)
}
filestr <- input$googleform
googleformfile <- read.csv(filestr$datapath, stringsAsFactors = FALSE)
people_placer(input$prod1title, input$prod2title, input$prod3title, googleformfile, input$num_productions)
})
output$downloadData <- downloadHandler(
filename = "productions.zip",
content = function(file) {
# write all CSV files, and attach underscored file names to them.
# note: prodmaker() returns prod. dataframes (1-3) and underscored filenames (4-6)
fs <- c(prodmaker()[[4]], prodmaker()[[5]], prodmaker()[[6]])
write.csv(prodmaker()[[1]], file = fs[1])
write.csv(prodmaker()[[2]], file = fs[2])
write.csv(prodmaker()[[3]], file = fs[3])
zip(zipfile = file, files = fs)
},
contentType = "application/zip"
)
}
shinyApp(ui, server)
runApp()
runApp()
shiny::runApp()
?splitLayout
runApp()
runApp()
runApp()
runApp()
View(people_placer)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# ** ACTUAL GOOGLE FORMS DATA: CREATING MEMBERS DF **
# delete timestamped row
members <- googleform[,-1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#NEW DESIGN 8/7
prod_df_list <- vector('list', num_productions)
#NEW DESIGN 8/7
prod_df_list <- vector('list', 3)
#for (i in 1:num_productions) {
for (i in 1:3) {
#next_item <- production[1 + ((i - 1) * 14):i * 14]
prod_df_list[[i]] <- production[1 + ((i - 1) * 14):i * 14]
}
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?merge()
runApp()
filenames <- c(paste0(production_titles_u, ".csv") , "MASTER")
runApp()
#8/8 TESTING MASTER FILE
prod_df_list[[num_productions + 1]] <- do.call("rbind", prod_df_list)
runApp()
runApp()
?head()
?rbindlist()
View(head(rbindlist(prod_df_list)))
View(prod_df_list)
runApp()
View(prod_df_list)
runApp()
runApp()
?rbind()
runApp()
View(prod_df_list)
runApp()
runApp()
runApp()
View(prod_df_list)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(prod_df_list)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
# ********* WRITERS/DIRECTORS *********
browser()
runApp()
runApp()
runApp()
options(error = browser())
runApp()
options(error = NULL)
shiny::runApp()
traceback()
options(warn=1)
source('~/Desktop/lux-production-builder/lux_production_builder/lux_production_builder_program.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?req()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/lux-production-builder/lux_production_builder/lux_production_builder_program.R')
source('~/Desktop/lux-production-builder/lux_production_builder/lux_production_builder_program.R')
if (i == length(unique_indexes)) {
split <- pa[unique_indexes[i]:nrow(pa),]
} else {
split <- pa[unique_indexes[i]:(unique_indexes[i + 1] - 1),]
}
# Local Test
au19titles <- c("Pumpkin Spice", "Home", "Life on Earth", "Pseudonym")
testlist <- people_placer(au19titles, "SHORT LUX Role Survey AU19 (Responses) EDITED BY RACHEL.csv", 4)
testtitles <- c("Ace Ventura", "Blazing Saddles", "Contact")
testlist <- people_placer(testtitles, "TEST_ LUX Role Survey AU19 (Responses) - Form Responses 1.csv", 3)
testtitles <- c("Ace Ventura", "Blazing Saddles", "Contact")
testlist <- people_placer(testtitles, "TEST_ LUX Role Survey (x3) (Responses) - Form Responses 1.csv", 3)
testtitles <- c("Ace Ventura", "Blazing Saddles", "Contact")
file <- read.csv("TEST_ LUX Role Survey (x3) (Responses) - Form Responses 1.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/lux-production-builder")
testtitles <- c("Ace Ventura", "Blazing Saddles", "Contact")
file <- read.csv("TEST_ LUX Role Survey (x3) (Responses) - Form Responses 1.csv", stringsAsFactors = FALSE)
testlist <- people_placer(testtitles, file, 3)
View(testlist)
# Local Test
au19titles <- c("Pumpkin Spice", "Home", "Life on Earth", "Pseudonym")
file <- read.csv("SHORT LUX Role Survey AU19 (Responses) EDITED BY RACHEL.csv", stringsAsFactors = FALSE)
testlist <- people_placer(au19titles, file, 4)
testtitles <- c("Ace Ventura", "Blazing Saddles", "Contact")
file <- read.csv("TEST_ LUX Role Survey (x3) (Responses) - Form Responses 1.csv", stringsAsFactors = FALSE)
testlist <- people_placer(testtitles, file, 3)
# Local Test
au19titles <- c("Pumpkin Spice", "Home", "Life on Earth", "Pseudonym")
file <- read.csv("SHORT LUX Role Survey AU19 (Responses) EDITED BY RACHEL.csv", stringsAsFactors = FALSE)
testlist <- people_placer(au19titles, file, 4)
source('~/Desktop/lux-production-builder/lux_production_builder/lux_production_builder_program.R')
source('~/Desktop/lux-production-builder/lux_production_builder/lux_production_builder_program.R')
testtitles <- c("Ace Ventura", "Blazing Saddles", "Contact")
file <- read.csv("TEST_ LUX Role Survey (x3) (Responses) - Form Responses 1.csv", stringsAsFactors = FALSE)
testlist <- people_placer(testtitles, file, 3)
View(testlist)
View(testlist[[1]])
View(testlist[[2]])
# Local Test
au19titles <- c("Pumpkin Spice", "Home", "Life on Earth", "Pseudonym")
file <- read.csv("SHORT LUX Role Survey AU19 (Responses) EDITED BY RACHEL.csv", stringsAsFactors = FALSE)
testlist <- people_placer(au19titles, file, 4)
# Local Test
au19titles <- c("Pumpkin Spice", "Home", "Life on Earth", "Pseudonym")
file <- read.csv("SHORT LUX Role Survey AU19 (Responses) EDITED BY RACHEL.csv", stringsAsFactors = FALSE)
testlist <- people_placer(au19titles, file, 4)
source('~/Desktop/lux-production-builder/lux_production_builder/lux_production_builder_program.R')
# Local Test
au19titles <- c("Pumpkin Spice", "Home", "Life on Earth", "Pseudonym")
file <- read.csv("SHORT LUX Role Survey AU19 (Responses) EDITED BY RACHEL.csv", stringsAsFactors = FALSE)
testlist <- people_placer(au19titles, file, 4)
# Local Test
au19titles <- c("Pumpkin Spice", "Home", "Life on Earth", "Pseudonym")
file <- read.csv("SHORT LUX Role Survey AU19 (Responses) EDITED BY RACHEL.csv", stringsAsFactors = FALSE)
testlist <- people_placer(au19titles, file, 4)
